//========================================================================================
// Linear algebra
//========================================================================================
const mulMatVec = (m, v) => [
  m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2],
  m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2],
  m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2]
];

const invMat = (m) => {
  const w = [[], [], []];
  const det = m[0][1] * m[1][2] * m[2][0] + m[0][2] * m[1][0] * m[2][1] + m[0][0] * m[1][1] * m[2][2] - m[0][2] * m[1][1] * m[2][0] - m[0][0] * m[1][2] * m[2][1] - m[0][1] * m[1][0] * m[2][2];

  w[0][0] = (m[1][1] * m[2][2] - m[1][2] * m[2][1]) / det;
  w[0][1] = (m[0][2] * m[2][1] - m[0][1] * m[2][2]) / det;
  w[0][2] = (m[0][1] * m[1][2] - m[0][2] * m[1][1]) / det;

  w[1][0] = (m[1][2] * m[2][0] - m[1][0] * m[2][2]) / det;
  w[1][1] = (m[0][0] * m[2][2] - m[0][2] * m[2][0]) / det;
  w[1][2] = (m[0][2] * m[1][0] - m[0][0] * m[1][2]) / det;

  w[2][0] = (m[1][0] * m[2][1] - m[1][1] * m[2][0]) / det;
  w[2][1] = (m[0][1] * m[2][0] - m[0][0] * m[2][1]) / det;
  w[2][2] = (m[0][0] * m[1][1] - m[0][1] * m[1][0]) / det;

  return w;
};

const subVecVec = (a, b) => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];

const addVecVec = (a, b) => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];

module.exports = {
  mulMatVec,
  invMat,
  subVecVec,
  addVecVec
};
